from random import random, Random
from checkers.board import Board
from checkers.piece import Piece
from checkers.game import Game
import numpy as np
from sty import fg, bg, ef, rs

game = Game()
random = Random()


# ● ○
# print("\033[1;32;40m \n")

def getCoords(position, gameWidth, gameHeight, orientation):
    if position % gameWidth == 0:
        x = gameWidth - 1
    else:
        x = (position % gameWidth) - 1
    y = (position - 1) // gameWidth
    if orientation == "black":
        x = gameWidth - 1 - x
        y = gameHeight - 1 - y
    return x, y


matrix = np.zeros((8, 8), dtype=int)
matrix_is_king = np.zeros((8, 8), dtype=bool)
template_matrix = np.array([[29, 0, 30, 0, 31, 0, 32, 0],
                            [0, 25, 0, 26, 0, 27, 0, 28],
                            [21, 0, 22, 0, 23, 0, 24, 0],
                            [0, 17, 0, 18, 0, 19, 0, 20],
                            [13, 0, 14, 0, 15, 0, 16, 0],
                            [0, 9, 0, 10, 0, 11, 0, 12],
                            [5, 0, 6, 0, 7, 0, 8, 0],
                            [0, 1, 0, 2, 0, 3, 0, 4]], dtype=int)


# TO DO:
# ustawic logike wyswietlania, najpierw ruch a pozniej obraz planszy czy jakos tam, trzeba sprawdzic
# zrobic ramke dookola planszy, szablonu planszy, z wypisanymi mozliwymi ruchami, czyja kolej i jaki ruch zostal wybrany
# dodac printy dla: czyja kolej, mozliwe ruchy, wybrany ruch

while not (game.is_over()):
    print("==============================================================================================================")
    print("Whose turn: ",game.whose_turn())
    print("Possible moves: ",game.get_possible_moves())
    possible_moves = game.get_possible_moves()
    rand_v = random.choice(possible_moves)
    print("Next move: ",rand_v)

    occupied = game.board.searcher.player_positions

    list_positions = list(game.board.searcher.position_pieces.values())
    for i in list_positions:
        is_king = i.king
        player_number = i.player
        curr_position = i.position
        if curr_position < 5 or (13 > curr_position > 8) or (21 > curr_position > 16) or (29 > curr_position > 24):
            curr_position = curr_position * 2
        else:
            curr_position = curr_position * 2 - 1
        x, y = getCoords(position=curr_position, gameWidth=8, gameHeight=8, orientation="black")
        matrix[x][y] = player_number
        matrix_is_king[x][y] = is_king

    display_matrix = np.rot90(matrix, 3)
    matrix_is_king = np.rot90(matrix_is_king, 3)

    for i in range(8):
        row_str = ""
        template_str = ""
        for j in range(8):
            ## Template matrix
            templ_str = str(template_matrix[i][j])
            if templ_str == '0':
                templ_str = "\033[0m" + " _ "
            if templ_str == '4':
                templ_str = "  " + templ_str
            if templ_str == '5':
                templ_str = templ_str + "  "
            if templ_str == '8':
                templ_str = templ_str + " "
            if templ_str == '6':
                templ_str = templ_str + " "
            if templ_str == '9':
                templ_str = templ_str + " "
            if templ_str == '2':
                templ_str = templ_str + " "
            if templ_str == '1':
                templ_str = templ_str + " "

            ## Game matrix
            add_str = str(display_matrix[i][j])  # 1 2 0
            if add_str == '0':
                add_str = "\033[0m" + " _ "
            if add_str == '1':
                if matrix_is_king[i][j]:
                    add_str = fg.black + ' A '
                else:
                    add_str = fg.black + ' ● '
            if add_str == '2':
                if matrix_is_king[i][j]:
                    add_str = fg.white + ' B '
                else:
                    add_str = fg.white + ' ● '

            row_str = row_str + add_str + "\033[0m" + "|"
            template_str = template_str + templ_str + "\033[0m" + "|"
        print(row_str + "       " + "|" + template_str)

    matrix = np.zeros((8, 8), dtype=int)
    matrix_is_king = np.zeros((8, 8), dtype=bool)
    game.move(rand_v)
    print("==============================================================================================================")
if game.get_winner() is None:
    print("There is no winner")
else:
    print("And the winner iiiis player: ", game.get_winner())
