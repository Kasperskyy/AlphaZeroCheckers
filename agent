import random

import numpy as np
from copy import deepcopy
from montecarlo.node import Node
from montecarlo.montecarlo import MonteCarlo
from checkers.game import Game
import main
import InputBuilder


class Agent:
    def __init__(self, ishuman):
        self.ishuman = ishuman
        # self.model = model

    def make_move(self, montecarlo=None):
        if self.ishuman == True:
            #move = input("Give move!!!!!!\n")
            #move = move.split()
            ###function(ideally inside montecarlo class) that
            '''
            picks a random move from the avaiable moves
            checks if this node is alReady in the mcts tree
            if it is, set it as the root node, subtract 1 from visits
            if it isn't, add it with zero visits and set as root node
            '''
            montecarlo.simulate(1)
            possible_moves = []
            for x in montecarlo.root_node.children:
                possible_moves.append(x.state.moves[-1])
            move = random.choice(possible_moves)
            move = [int(item) for item in move]
            for x in montecarlo.root_node.children:
                if x.state.moves[-1] == move:
                    montecarlo.root_node = x
                    break
            return move
        else:
            montecarlo.simulate(30)
            montecarlo.root_node = montecarlo.make_choice()
            montecarlo.root_node.visits -= 1
            return montecarlo.root_node.state.moves[-1]
