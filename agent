import random

import numpy as np
from checkers.game import Game
from sty import fg, bg, ef, rs
from copy import deepcopy
from montecarlo.node import Node
from montecarlo.montecarlo import MonteCarlo
from checkers.game import Game
import main
import InputBuilder


class Agent:
    def __init__(self, botcategory,number):
        self.botcategory = botcategory###############0 człowiek ##########1 random ##########2 nasza sieć
        self.number = number
        # self.model = model

       def make_move(self, montecarlo=None, game=None):
        if self.botcategory == 0:
            print(
                "==============================================================================================================")
            matrix = np.zeros((8, 8), dtype=int)
            matrix_is_king = np.zeros((8, 8), dtype=bool)
            template_matrix = np.array([[29, 0, 30, 0, 31, 0, 32, 0],
                                        [0, 25, 0, 26, 0, 27, 0, 28],
                                        [21, 0, 22, 0, 23, 0, 24, 0],
                                        [0, 17, 0, 18, 0, 19, 0, 20],
                                        [13, 0, 14, 0, 15, 0, 16, 0],
                                        [0, 9, 0, 10, 0, 11, 0, 12],
                                        [5, 0, 6, 0, 7, 0, 8, 0],
                                        [0, 1, 0, 2, 0, 3, 0, 4]], dtype=int)
            occupied = game.board.searcher.player_positions

            list_positions = list(game.board.searcher.position_pieces.values())
            for i in list_positions:
                is_king = i.king
                player_number = i.player
                curr_position = i.position
                if curr_position < 5 or (13 > curr_position > 8) or (21 > curr_position > 16) or (
                        29 > curr_position > 24):
                    curr_position = curr_position * 2
                else:
                    curr_position = curr_position * 2 - 1
                x, y = InputBuilder.getCoords(position=curr_position, gameWidth=8, gameHeight=8, orientation="black")
                matrix[x][y] = player_number
                matrix_is_king[x][y] = is_king

            display_matrix = np.rot90(matrix, 3)
            matrix_is_king = np.rot90(matrix_is_king, 3)

            for i in range(8):
                row_str = ""
                template_str = ""
                for j in range(8):
                    ## Template matrix
                    templ_str = str(template_matrix[i][j])
                    if templ_str == '0':
                        templ_str = "\033[0m" + " _ "
                    if templ_str == '4':
                        templ_str = "  " + templ_str
                    if templ_str == '5':
                        templ_str = templ_str + "  "
                    if templ_str == '8':
                        templ_str = templ_str + " "
                    if templ_str == '6':
                        templ_str = templ_str + " "
                    if templ_str == '9':
                        templ_str = templ_str + " "
                    if templ_str == '2':
                        templ_str = templ_str + " "
                    if templ_str == '1':
                        templ_str = templ_str + " "

                    ## Game matrix
                    add_str = str(display_matrix[i][j])  # 1 2 0
                    if add_str == '0':
                        add_str = "\033[0m" + " _ "
                    if add_str == '1':
                        if matrix_is_king[i][j]:
                            add_str = fg.black + ' A '
                        else:
                            add_str = fg.black + ' ● '
                    if add_str == '2':
                        if matrix_is_king[i][j]:
                            add_str = fg.white + ' B '
                        else:
                            add_str = fg.white + ' ● '

                    row_str = row_str + add_str + "\033[0m" + "|"
                    template_str = template_str + templ_str + "\033[0m" + "|"
                print(row_str + "       " + "|" + template_str)

            matrix = np.zeros((8, 8), dtype=int)
            matrix_is_king = np.zeros((8, 8), dtype=bool)
            print("turn " + str(len(game.moves)))
            print("possible: " + str(game.get_possible_moves()))
            move = input("Give move!!!!!!\n")
            move = move.split()
            ###function(ideally inside montecarlo class) that
            move[0]=int(move[0])
            move[1] = int(move[1])
            '''
            picks a random move from the avaiable moves
            checks if this node is alReady in the mcts tree
            if it is, set it as the root node, subtract 1 from visits
            if it isn't, add it with zero visits and set as root node
            '''
            print(
                "==============================================================================================================")
            possible_moves = []
            for x in montecarlo.root_node.state.get_possible_moves():
                possible_moves.append(x)
            #move = random.choice(possible_moves)
            montecarlo.non_user_expand(self.number, move)
            return move
        elif self.botcategory == 1:
            possible_moves = []
            for x in montecarlo.root_node.state.get_possible_moves():
                possible_moves.append(x)
            move = random.choice(possible_moves)
            montecarlo.non_user_expand(self.number, move)
            return move
        else:
            montecarlo.simulate(60, self.number)
            montecarlo.root_node = montecarlo.make_choice()
            if montecarlo.root_node.visits != 0:
                montecarlo.root_node.visits -= 1
            return montecarlo.root_node.state.moves[-1]
